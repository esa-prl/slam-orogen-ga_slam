name 'ga_slam'

using_library 'ga_slam'
using_library 'ga_slam_cereal'
using_library 'grid_map_core'
using_library 'pcl_common-1.8'
using_library 'opencv'

import_types_from 'base'

task_context 'Task' do
    needs_configuration

    ####### Properties #######
    property('mapLength', 'double', 10.0).
        doc 'Size of one dimension of the map in meters'

    property('mapResolution', 'double', 0.05).
        doc 'Resolution of each square cell of the map'

    property('minElevation', 'double', -5.0).
        doc 'Minimum cutoff height of the voxelized point cloud'

    property('maxElevation', 'double', 5.0).
        doc 'Maximum cutoff height of the voxelized point cloud'

    property('voxelSize', 'double', 0.025).
        doc 'Dimension of each voxel of the point cloud'

    property('depthSigmaCoeff1', 'double', 0.001).
        doc 'First coefficient of the uncertainty equation of the depth sensor'

    property('depthSigmaCoeff2', 'double', 0.0).
        doc 'Second coefficient of the uncertainty equation of the depth sensor'

    property('depthSigmaCoeff3', 'double', 0.01).
        doc 'Third coefficient of the uncertainty equation of the depth sensor'

    property('numParticles', 'int', 100).
        doc 'Number of particles used in the particle filter'

    property('resampleFrequency', 'int', 10).
        doc 'Number of iterations of the particle filter before resampling'

    property('initialSigmaX', 'double', 0.0).
        doc 'Sigma of gaussian distribution of x for particle initialization'

    property('initialSigmaY', 'double', 0.0).
        doc 'Sigma of gaussian distribution of y for particle initialization'

    property('initialSigmaYaw', 'double', 0.0).
        doc 'Sigma of gaussian distribution of yaw for particle initialization'

    property('predictSigmaX', 'double', 0.2).
        doc 'Sigma of gaussian distribution of x for particle prediction'

    property('predictSigmaY', 'double', 0.2).
        doc 'Sigma of gaussian distribution of y for particle prediction'

    property('predictSigmaYaw', 'double', Math::PI/18).
        doc 'Sigma of gaussian distribution of yaw for particle prediction'

    property('traversedDistanceThreshold', 'double', 5.0).
        doc 'Distance the robot must traverse before a new pose correction'

    property('minSlopeThreshold', 'double', 0.5).
        doc 'Minimum slope (in radians) a cell of the map needs to have ' +
            'to be considered as an elevation feature'

    property('slopeSumThresholdMultiplier', 'double', 10.0).
        doc 'Divided by the resolution of the map to produce the ' +
            'slope sum threshold, which determines if the map has enough ' +
            'elevation features for map matching (e.g. 10/0.05 > sum(slopes))'

    property('matchAcceptanceThreshold', 'double', 0.9).
        doc 'Minimum score the matched position from template matching ' +
            'must have, in order for the matching to be accepted'

    property('matchYaw', 'bool', false).
        doc 'Whether to correct the yaw of the global pose'

    property('matchYawRange', 'double', 20*Math::PI/180).
        doc 'Scan range of yaw angle in radians for the template matching'

    property('matchYawStep', 'double', 1*Math::PI/180).
        doc 'Scan step of yaw angle in radians for the template matching'

    property('orbiterMapLength', 'double', 100.0).
        doc 'Size of one dimension of the desired orbiter map in meters'

    property('orbiterMapResolution', 'double', 1.0).
        doc 'Resolution of the desired orbiter map in meters'

    ####### States #######
    error_states 'TRANSFORM_NOT_FOUND'

    ####### Input Ports #######
    input_port('odometryPose', '/base/samples/RigidBodyState').
        doc 'Odometry estimation of pose (6D) with covariance and timestamp'

    input_port('imuOrientation', '/base/samples/RigidBodyState').
        doc 'Orientation from the IMU sensor with covariance and timestamp'

    input_port('hazcamCloud', '/base/samples/Pointcloud').
        doc 'Dense point cloud with timestamp in the sensor (HazCam) frame'

    input_port('loccamCloud', '/base/samples/Pointcloud').
        doc 'Dense point cloud with timestamp in the sensor (LocCam) frame'

    input_port('pancamCloud', '/base/samples/Pointcloud').
        doc 'Dense point cloud with timestamp in the sensor (PanCam) frame'

    input_port('pancamTransformation', '/base/samples/RigidBodyState').
        doc 'Transformation from pancam sensor frame to robot frame'

    input_port('orbiterCloud', '/base/samples/Pointcloud').
        doc 'Dense point cloud from the orbiter'

    input_port('orbiterCloudPose', '/base/samples/RigidBodyState').
        doc 'Pose of point cloud from the orbiter'

    ####### Output Ports #######
    output_port('elevationMapMean', '/base/samples/DistanceImage').
        doc 'Mean of robot-centric elevation map (2.5D space representation)'

    output_port('elevationMapVariance', '/base/samples/DistanceImage').
        doc 'Variance of robot-centric elevation map (2.5D space representation)'

    output_port('estimatedPose', '/base/samples/RigidBodyState').
        doc 'Corrected pose estimation (6D) with covariance and timestamp'

    output_port('estimationError', 'double').
        doc 'absolute pose estimation error (norm of XY error vector)'


    ####### Debug Ports #######
    property('debugInfoEnabled', 'bool', false).
        doc 'Output debug information. This must be enabled for the' +
            'other debug properties to have an effect'

    property('cloudDebugEnabled', 'bool', false).
        doc 'Output processed point cloud and map point cloud'

    property('serializationDebugEnabled', 'bool', false).
        doc 'Serialize the local and global maps and save them to disk'

    property('localMapPath', '/std/string', '/tmp/ga_slam_local_map.cereal').
        doc 'Path to save the serialized local elevation map'

    property('globalMapPath', '/std/string', '/tmp/ga_slam_global_map.cereal').
        doc 'Path to save the serialized global elevation map'

    property('odometryPosePath', '/std/string', '/tmp/ga_slam_odometry_pose.cereal').
        doc 'Path to save the serialized pose estimated by odometry'

    property('slamPosePath', '/std/string', '/tmp/ga_slam_slam_pose.cereal').
        doc 'Path to save the serialized pose estimated by SLAM'

    property('globalPosePath', '/std/string',
            '/tmp/ga_slam_global_pose.cereal').
        doc 'Path to save the serialized global pose'

    property('particlesArrayPath', '/std/string',
            '/tmp/ga_slam_particles_array.cereal').
        doc 'Path to save the serialized array containing the particles from ' +
            'the particle filter'

    output_port('mapCloud', '/base/samples/Pointcloud').
        doc 'Point cloud in the map frame created from the local map'

    ####### Transformer #######
    transformer do
        transform 'hazcam', 'body'
        transform 'loccam', 'body'

        max_latency 0
    end

    periodic 0.5
end

